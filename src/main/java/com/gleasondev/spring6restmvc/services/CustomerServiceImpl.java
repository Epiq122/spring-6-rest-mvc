package com.gleasondev.spring6restmvc.services;import com.gleasondev.spring6restmvc.model.CustomerDTO;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.time.LocalDateTime;import java.util.*;@Servicepublic class CustomerServiceImpl implements CustomerService {    private final Map<UUID, CustomerDTO> customerMap;    public CustomerServiceImpl() {        this.customerMap = new HashMap<>();        CustomerDTO customerDTO1 = CustomerDTO.builder()                                              .id(UUID.randomUUID())                                              .name("Rob Gleason")                                              .version(1)                                              .createdDate(LocalDateTime.now())                                              .lastModifiedDate(LocalDateTime.now())                                              .build();        CustomerDTO customerDTO2 = CustomerDTO.builder()                                              .id(UUID.randomUUID())                                              .name("Dicky Roberts")                                              .version(1)                                              .createdDate(LocalDateTime.now())                                              .lastModifiedDate(LocalDateTime.now())                                              .build();        CustomerDTO customerDTO3 = CustomerDTO.builder()                                              .id(UUID.randomUUID())                                              .name("Larza Mandalin")                                              .version(1)                                              .createdDate(LocalDateTime.now())                                              .lastModifiedDate(LocalDateTime.now())                                              .build();        customerMap.put(customerDTO1.getId(), customerDTO1);        customerMap.put(customerDTO2.getId(), customerDTO2);        customerMap.put(customerDTO3.getId(), customerDTO3);    }    @Override    public List<CustomerDTO> listCustomers() {        return new ArrayList<>(customerMap.values());    }    @Override    public Optional<CustomerDTO> getCustomerById(UUID id) {        return Optional.of(customerMap.get(id));    }    @Override    public CustomerDTO saveNewCustomer(CustomerDTO customerDTO) {        CustomerDTO savedCustomerDTO = CustomerDTO.builder()                                                  .id(UUID.randomUUID())                                                  .version(customerDTO.getVersion())                                                  .name(customerDTO.getName())                                                  .createdDate(customerDTO.getCreatedDate())                                                  .lastModifiedDate(customerDTO.getLastModifiedDate())                                                  .build();        customerMap.put(savedCustomerDTO.getId(), savedCustomerDTO);        return savedCustomerDTO;    }    @Override    public void updateCustomerById(UUID customerId, CustomerDTO customerDTO) {        CustomerDTO existing = customerMap.get(customerId);        existing.setName(customerDTO.getName());        customerMap.put(existing.getId(), existing);    }    @Override    public void deleteCustomerById(UUID customerId) {        customerMap.remove(customerId);    }    @Override    public void patchCustomerById(UUID customerId, CustomerDTO customerDTO) {        CustomerDTO existing = customerMap.get(customerId);        if (StringUtils.hasText(customerDTO.getName())) {            existing.setName(customerDTO.getName());        }    }}