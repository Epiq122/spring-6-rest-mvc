package com.gleasondev.spring6restmvc.services;import com.gleasondev.spring6restmvc.mappers.CustomerMapper;import com.gleasondev.spring6restmvc.model.CustomerDTO;import com.gleasondev.spring6restmvc.repositories.CustomerRepository;import lombok.AllArgsConstructor;import org.springframework.context.annotation.Primary;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.util.List;import java.util.Optional;import java.util.UUID;import java.util.concurrent.atomic.AtomicReference;import java.util.stream.Collectors;@Service@Primary@AllArgsConstructorpublic class CustomerServiceJPA implements CustomerService {    CustomerRepository customerRepository;    CustomerMapper customerMapper;    @Override    public List<CustomerDTO> listCustomers() {        return customerRepository.findAll().stream()                                 .map(customerMapper::customerToCustomerDto)                                 .collect(Collectors.toList());    }    @Override    public Optional<CustomerDTO> getCustomerById(UUID id) {        return Optional.ofNullable(customerMapper.customerToCustomerDto(customerRepository.findById(id)                                                                                          .orElse(null)));    }    @Override    public CustomerDTO saveNewCustomer(CustomerDTO customer) {        return customerMapper.customerToCustomerDto(customerRepository                .save(customerMapper.customerDtoToCustomer(customer)));    }    @Override    public Optional<CustomerDTO> updateCustomerById(UUID customerId, CustomerDTO customer) {        AtomicReference<Optional<CustomerDTO>> atomicReference = new AtomicReference<>();        customerRepository.findById(customerId).ifPresentOrElse(foundCustomer -> {            foundCustomer.setName(customer.getName());            atomicReference.set(Optional.of(customerMapper                    .customerToCustomerDto(customerRepository.save(foundCustomer))));        }, () -> {            atomicReference.set(Optional.empty());        });        return atomicReference.get();    }    @Override    public Boolean deleteCustomerById(UUID customerId) {        if (customerRepository.existsById(customerId)) {            customerRepository.deleteById(customerId);            return true;        }        return false;    }    @Override    public Optional<CustomerDTO> patchCustomerById(UUID customerId, CustomerDTO customerDTO) {        AtomicReference<Optional<CustomerDTO>> atomicReference = new AtomicReference<>();        customerRepository.findById(customerId).ifPresentOrElse(foundCustomer -> {            if (StringUtils.hasText(customerDTO.getName())) {                foundCustomer.setName(customerDTO.getName());            }            atomicReference.set(Optional.of(customerMapper.customerToCustomerDto(customerRepository.save(foundCustomer))));        }, () -> {            atomicReference.set(Optional.empty());        });        return atomicReference.get();    }}