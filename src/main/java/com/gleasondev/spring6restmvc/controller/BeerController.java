package com.gleasondev.spring6restmvc.controller;import com.gleasondev.spring6restmvc.model.BeerDTO;import com.gleasondev.spring6restmvc.services.BeerService;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@Slf4j@RequiredArgsConstructor@RestControllerpublic class BeerController {    public static final String BEER_PATH = "/api/v1/beer/";    public static final String BEER_PATH_ID = BEER_PATH + "{beerId}";    private final BeerService beerService;    @PatchMapping(BEER_PATH_ID)    public ResponseEntity updateBeerPatchById(@PathVariable("beerId") UUID beerId, @RequestBody BeerDTO beer) {        beerService.patchBeerById(beerId, beer);        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    // Delete beers    @DeleteMapping(BEER_PATH_ID)    public ResponseEntity deleteById(@PathVariable("beerId") UUID beerId) {        beerService.deleteBeerById(beerId);        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    // Update beers    @PutMapping(BEER_PATH_ID)    public ResponseEntity updateById(@PathVariable("beerId") UUID beerId, @RequestBody BeerDTO beer) {        if (beerService.updateBeerById(beerId, beer).isEmpty()) {            throw new NotFoundException();        }        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    //Add a new beer//    @RequestMapping(method = RequestMethod.POST)    @PostMapping(BEER_PATH)    public ResponseEntity handlePost(@RequestBody BeerDTO beer) {        BeerDTO savedBeerDTO = beerService.saveNewBeer(beer);        HttpHeaders headers = new HttpHeaders();        headers.add("Location", BEER_PATH + savedBeerDTO.getId().toString());        return new ResponseEntity(headers, HttpStatus.CREATED);    }    @GetMapping(BEER_PATH)    public List<BeerDTO> listBeers() {        return beerService.listBeers();    }    @GetMapping(BEER_PATH_ID)    public BeerDTO getBeerById(@PathVariable("beerId") UUID beerId) {        log.debug("Get Beer By ID - in Controller -12342");        return beerService.getBeerById(beerId).orElseThrow(NotFoundException::new);    }}