package com.gleasondev.spring6restmvc.controller;import com.gleasondev.spring6restmvc.model.CustomerDTO;import com.gleasondev.spring6restmvc.services.CustomerService;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RequiredArgsConstructor@RestControllerpublic class CustomerController {    public static final String CUSTOMER_PATH = "/api/v1/customer/";    public static final String CUSTOMER_PATH_ID = CUSTOMER_PATH + "{customerId}";    private final CustomerService customerService;    // RARELY USED!    @PatchMapping(CUSTOMER_PATH_ID)    public ResponseEntity updateCustomerPatchById(@PathVariable("customerId") UUID customerId, @RequestBody CustomerDTO customerDTO) {        customerService.patchCustomerById(customerId, customerDTO);        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    // Delete Customer    @DeleteMapping(CUSTOMER_PATH_ID)    public ResponseEntity deleteById(@PathVariable("customerId") UUID customerId) {        customerService.deleteCustomerById(customerId);        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    //  Update Customer    @PutMapping(CUSTOMER_PATH_ID)    public ResponseEntity updateById(@PathVariable("customerId") UUID customerId, @RequestBody CustomerDTO customerDTO) {        customerService.updateCustomerById(customerId, customerDTO);        return new ResponseEntity(HttpStatus.NO_CONTENT);    }    @PostMapping(CUSTOMER_PATH)    public ResponseEntity handlePost(@RequestBody CustomerDTO customerDTO) {        CustomerDTO savedCustomerDTO = customerService.saveNewCustomer(customerDTO);        HttpHeaders headers = new HttpHeaders();        headers.add("Location", "/api/v1/customer" + savedCustomerDTO.getId().toString());        return new ResponseEntity(headers, HttpStatus.CREATED);    }    // Gets the customers    @GetMapping(CUSTOMER_PATH)    public List<CustomerDTO> listCustomers() {        return customerService.listCustomers();    }    @GetMapping(CUSTOMER_PATH_ID)    public CustomerDTO getCustomerById(@PathVariable("customerId") UUID customerId) {        return customerService.getCustomerById(customerId).orElseThrow(NotFoundException::new);    }}