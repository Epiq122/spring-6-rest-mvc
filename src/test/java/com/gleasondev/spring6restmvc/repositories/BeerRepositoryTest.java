package com.gleasondev.spring6restmvc.repositories;import com.gleasondev.spring6restmvc.bootstrap.BootstrapData;import com.gleasondev.spring6restmvc.entities.Beer;import com.gleasondev.spring6restmvc.model.BeerStyle;import com.gleasondev.spring6restmvc.services.BeerCsvServiceImpl;import jakarta.validation.ConstraintViolationException;import org.assertj.core.api.Assertions;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;import org.springframework.context.annotation.Import;import java.math.BigDecimal;import java.util.List;import static org.assertj.core.api.Assertions.assertThat;import static org.junit.jupiter.api.Assertions.assertThrows;@DataJpaTest@Import({BootstrapData.class, BeerCsvServiceImpl.class})class BeerRepositoryTest {    @Autowired    BeerRepository beerRepository;    @Test    void testGetBeerListByName() {        List<Beer> list = beerRepository.findAllByBeerNameIsLikeIgnoreCase("%IPA%");        assertThat(list.size()).isEqualTo(336);    }    @Test    void testSaveBeer() {        Beer savedBeer = beerRepository.save(Beer.builder()                                                 .beerName("My Beer")                                                 .beerStyle(BeerStyle.PORTER)                                                 .upc("123123123")                                                 .price(new BigDecimal("12.99"))                                                 .build());        beerRepository.flush(); // forces the data to be written to the database        Assertions.assertThat(savedBeer).isNotNull();        Assertions.assertThat(savedBeer.getId()).isNotNull();    }    @Test    void testSaveBeerNameTooLong() {        assertThrows(ConstraintViolationException.class, () -> {            Beer savedBeer = beerRepository.save(Beer.builder()                                                     .beerName("My " +                                                             "Beer4124124214124214218421798147247298714298172984721981724981729847198427918742981724981724897128947128947981724981729817249817249871289471289471872498172498172498719847198724918742817249871289412798172894178971471499718284127981728974")                                                     .beerStyle(BeerStyle.PORTER)                                                     .upc("123123123")                                                     .price(new BigDecimal("12.99"))                                                     .build());            beerRepository.flush(); // forces the data to be written to the database        });    }}