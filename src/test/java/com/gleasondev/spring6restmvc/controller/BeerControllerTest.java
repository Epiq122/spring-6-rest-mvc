package com.gleasondev.spring6restmvc.controller;import com.fasterxml.jackson.databind.ObjectMapper;import com.gleasondev.spring6restmvc.model.Beer;import com.gleasondev.spring6restmvc.services.BeerService;import com.gleasondev.spring6restmvc.services.BeerServiceImpl;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.ArgumentCaptor;import org.mockito.Captor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import java.util.HashMap;import java.util.Map;import java.util.UUID;import static org.assertj.core.api.Assertions.assertThat;import static org.hamcrest.core.Is.is;import static org.mockito.ArgumentMatchers.any;import static org.mockito.BDDMockito.given;import static org.mockito.Mockito.verify;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@WebMvcTest(BeerController.class)class BeerControllerTest {    @Autowired    MockMvc mockMvc;    // todo with jackson    @Autowired    ObjectMapper objectMapper;    @MockBean    BeerService beerService;    BeerServiceImpl beerServiceImpl;    @Captor    ArgumentCaptor<UUID> uuidArgumentCaptor;    @Captor    ArgumentCaptor<Beer> beerArgumentCaptor;    @BeforeEach        // this runs before each test    void name() {        beerServiceImpl = new BeerServiceImpl();    }    @Test    void testPatchBeer() throws Exception {        Beer beer = beerServiceImpl.listBeers().get(0);        Map<String, Object> beerMap = new HashMap<>();        beerMap.put("beerName", "New Name"); // get simple json object with new name        mockMvc.perform(patch(BeerController.BEER_PATH_ID, beer.getId())                       .contentType(MediaType.APPLICATION_JSON)                       .accept(MediaType.APPLICATION_JSON)                       .content(objectMapper.writeValueAsString(beerMap)))               .andExpect(status().isNoContent());        verify(beerService).patchBeerById(uuidArgumentCaptor.capture(), beerArgumentCaptor.capture());        assertThat(beer.getId()).isEqualTo(uuidArgumentCaptor.getValue());        assertThat(beerMap.get("beerName")).isEqualTo(beerArgumentCaptor.getValue().getBeerName());    }    @Test    void testDeleteBeer() throws Exception {        Beer beer = beerServiceImpl.listBeers().get(0);        mockMvc.perform(delete(BeerController.BEER_PATH_ID, beer.getId())                       .accept(MediaType.APPLICATION_JSON))               .andExpect(status().isNoContent());        verify(beerService).deleteBeerById(uuidArgumentCaptor.capture()); // verfiys the uuid is in fact passed to the id        // to get the proper value        assertThat(beer.getId()).isEqualTo(uuidArgumentCaptor.getValue());    }    @Test    void testUpdateBeer() throws Exception {        Beer beer = beerServiceImpl.listBeers().get(0);        mockMvc.perform(put(BeerController.BEER_PATH_ID, beer.getId())                       .accept(MediaType.APPLICATION_JSON)                       .contentType(MediaType.APPLICATION_JSON)                       .content(objectMapper.writeValueAsString(beer)))               .andExpect(status().isNoContent());        verify(beerService).updateBeerById(any(UUID.class), any(Beer.class)); // any UUID or ANY beer    }    // JACKSON    @Test    void testCreateNewBeer() throws Exception {        Beer beer = beerServiceImpl.listBeers().get(0);        beer.setVersion(null);        beer.setId(null);        given(beerService.saveNewBeer(any(Beer.class))).willReturn(beerServiceImpl.listBeers().get(1));        mockMvc.perform(post(BeerController.BEER_PATH).accept(MediaType.APPLICATION_JSON)                                                      .contentType(MediaType.APPLICATION_JSON)                                                      .content(objectMapper.writeValueAsString(beer)))               .andExpect(status().isCreated())               .andExpect(header().exists("Location"));    }    @Test    void testListBeers() throws Exception {        given(beerService.listBeers()).willReturn(beerServiceImpl.listBeers());        mockMvc.perform(get(BeerController.BEER_PATH)                       .accept(MediaType.APPLICATION_JSON))               .andExpect(status().isOk())               .andExpect(content().contentType(MediaType.APPLICATION_JSON))               .andExpect(jsonPath("$.length()", is(3))); // checking to make sure there is 3 items in the list    }    @Test    void getBeerById() throws Exception {        Beer testBeer = beerServiceImpl.listBeers().get(0); // asks for the first beer        given(beerService.getBeerById(testBeer.getId())).willReturn(testBeer); // checking the id of the first beer        mockMvc.perform(get(BeerController.BEER_PATH_ID, testBeer.getId()) // adds the id to the end of the url                                                                           .accept(MediaType.APPLICATION_JSON))               .andExpect(status().isOk())               .andExpect(content().contentType(MediaType.APPLICATION_JSON))               .andExpect(jsonPath("$.id", is(testBeer.getId().toString()))) // checks to make sure there is a ID               .andExpect(jsonPath("$.beerName", is(testBeer.getBeerName()))); // checks to make sure is a beer name    }}