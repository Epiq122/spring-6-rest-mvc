package com.gleasondev.spring6restmvc.controller;import com.gleasondev.spring6restmvc.entities.Beer;import com.gleasondev.spring6restmvc.mappers.BeerMapper;import com.gleasondev.spring6restmvc.model.BeerDTO;import com.gleasondev.spring6restmvc.repositories.BeerRepository;import jakarta.transaction.Transactional;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpStatusCode;import org.springframework.http.ResponseEntity;import org.springframework.test.annotation.Rollback;import java.util.List;import java.util.UUID;import static org.assertj.core.api.Assertions.assertThat;import static org.junit.jupiter.api.Assertions.assertThrows;@SpringBootTestclass BeerControllerIT {    @Autowired    BeerController beerController;    @Autowired    BeerRepository beerRepository;    @Autowired    BeerMapper beerMapper;    @Test    void testListBeers() {        List<BeerDTO> dtos = beerController.listBeers();        assertThat(dtos.size()).isEqualTo(3);    }    // Want the test to roll back to the state before the test    @Rollback    @Transactional    @Test    void testEmptyList() {        beerRepository.deleteAll();        List<BeerDTO> dtos = beerController.listBeers();        assertThat(dtos.size()).isEqualTo(0);    }    //want this specfic not found exception to be thrown when  the beerId is not found    @Test    void testBeerNotFound() {        assertThrows(NotFoundException.class, () -> beerController.getBeerById(UUID.randomUUID()));    }    @Test    void testGetBeerById() {        Beer beer = beerRepository.findAll().get(0);        BeerDTO dto = beerController.getBeerById(beer.getId());        assertThat(dto).isNotNull();    }    @Rollback    @Transactional    @Test    void saveNewBeerTest() {        BeerDTO beerDTO = BeerDTO.builder()                                 .beerName("New Beer")                                 .build();        ResponseEntity responseEntity = beerController.handlePost(beerDTO);        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatusCode.valueOf(201));        assertThat(responseEntity.getHeaders().getLocation()).isNotNull();        String[] locationUUID = responseEntity.getHeaders().getLocation().getPath().split("/");        UUID uuid = UUID.fromString(locationUUID[4]);        Beer beer = beerRepository.findById(uuid).get();        assertThat(beer).isNotNull();    }    @Rollback    @Transactional    @Test    void updateExistingBeer() {        Beer beer = beerRepository.findAll().get(0);        BeerDTO beerDTO = beerMapper.beerToBeerDto(beer);        beerDTO.setId(null);        beerDTO.setVersion(null);        final String beerName = "UPDATED!";        beerDTO.setBeerName(beerName);        ResponseEntity responseEntity = beerController.updateById(beer.getId(), beerDTO);        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatusCode.valueOf(204));        Beer updatedBeer = beerRepository.findById(beer.getId()).get();        assertThat(updatedBeer.getBeerName()).isEqualTo(beerName);    }    @Test    void testUpdateNotFound() {        assertThrows(NotFoundException.class,                () -> beerController.updateById(UUID.randomUUID(), BeerDTO.builder().build()));    }    @Test    void testDeleteByIdNotFound() {        assertThrows(NotFoundException.class, () -> beerController.deleteById(UUID.randomUUID()));    }    @Rollback    @Transactional    @Test    void deleteByIdFound() {        Beer beer = beerRepository.findAll().get(0);        ResponseEntity responseEntity = beerController.deleteById(beer.getId());        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatusCode.valueOf(204));        assertThat(beerRepository.findById(beer.getId()).isEmpty());//        Beer foundBeer = beerRepository.findById(beer.getId()).get();//        assertThat(foundBeer).isNull();    }}