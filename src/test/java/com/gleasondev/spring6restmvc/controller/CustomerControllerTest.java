package com.gleasondev.spring6restmvc.controller;import com.fasterxml.jackson.databind.ObjectMapper;import com.gleasondev.spring6restmvc.model.Customer;import com.gleasondev.spring6restmvc.services.CustomerService;import com.gleasondev.spring6restmvc.services.CustomerServiceImpl;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import static org.hamcrest.core.Is.is;import static org.mockito.ArgumentMatchers.any;import static org.mockito.BDDMockito.given;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@WebMvcTest(CustomerController.class)class CustomerControllerTest {    @Autowired    MockMvc mockMvc;    @MockBean    CustomerService customerService;    @Autowired    ObjectMapper objectMapper;    CustomerServiceImpl customerServiceImpl;    @BeforeEach    void name() {        customerServiceImpl = new CustomerServiceImpl();    }    @Test    void testCreateCustomer() throws Exception {        Customer customer = customerServiceImpl.listCustomers().get(0);        customer.setVersion(null);        customer.setId(null);        given(customerService.saveNewCustomer(any(Customer.class))).willReturn(customerServiceImpl.listCustomers().get(1));        mockMvc.perform(post("/api/v1/customer").accept(MediaType.APPLICATION_JSON)                                                .contentType(MediaType.APPLICATION_JSON)                                                .content(objectMapper.writeValueAsString(customer)))               .andExpect(status().isCreated())               .andExpect(header().exists("Location"));    }    @Test    void testListCustomers() throws Exception {        given(customerService.listCustomers()).willReturn(customerServiceImpl.listCustomers());        mockMvc.perform(get("/api/v1/customer")                       .accept(MediaType.APPLICATION_JSON))               .andExpect(status().isOk())               .andExpect(content().contentType(MediaType.APPLICATION_JSON))               .andExpect(jsonPath("$.length()", is((3))));    }    @Test    void getCustomerById() throws Exception {        Customer testCustomer = customerServiceImpl.listCustomers().get(0);        given(customerService.getCustomerById(testCustomer.getId())).willReturn(testCustomer);        mockMvc.perform(get("/api/v1/customer/" + testCustomer.getId()) // adds the id on the end                                                                        .accept(MediaType.APPLICATION_JSON))               .andExpect(status().isOk())               .andExpect(content().contentType(MediaType.APPLICATION_JSON))               .andExpect(jsonPath("$.name", is(testCustomer.getName())));    }}